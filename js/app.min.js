(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

'use strict';


var audio = require('../services/audio');

module.exports = function($scope, player) {

  console.log('MainCtrl');

  $scope.tracks = [];
  $scope.player = player;
  $scope.audio = audio;

  $scope.currentTime = player.currentTime;
  $scope.duration = player.duration;

  audio.addEventListener('timeupdate', function() {
    $scope.$apply(function() {
      $scope.currentTime = audio.currentTime;
      $scope.duration = audio.duration;
    });
  });
  
};

},{"../services/audio":4}],2:[function(require,module,exports){

'use strict';


module.exports = ['$http', 'player', function($http, player) {
  console.log(player);
  return {
    scope: true,
    link: function(scope, el, attr) {
      var $ = angular.element;
      var items = $(el).children();
      //scope.tracks = scope.tracks || [];
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var track = {
          index: item.dataset.index,
          title: item.dataset.title,
          src: item.dataset.src
        };

        scope.tracks.push(track);
        player.load(track, i);
      };

    }
  }
}];


},{}],3:[function(require,module,exports){
// App

'use strict';

var app = angular.module('app', [], ["$interpolateProvider", function($interpolateProvider) {
  $interpolateProvider.startSymbol('{%');
  $interpolateProvider.endSymbol('%}');
}]);

// Services
app.factory('player', require('./services/player'));

// Directives
app.directive('tracklist', require('./directives/tracklist'));

// Filters

// Controllers
app.controller('MainCtrl', require('./controllers/main'));

module.exports = app;

},{"./controllers/main":1,"./directives/tracklist":2,"./services/player":5}],4:[function(require,module,exports){
(function (global){
// Audio element

'use strict';

var audio = global.audio || document.createElement('audio');

module.exports = audio;


}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],5:[function(require,module,exports){
// Audio player

'use strict';


var audio = require('./audio');

//var Player = function() {
module.exports = function() {

  var player = {};
  // Expose audio element
  player.audio = audio;
  player.i = 0;
  player.playlistIndex = 0;
  player.playing = false;
  player.tracks = [];
  player.currentTrack = null;
  player.currentTime = 0;
  player.duration = 0;

  player.play = function(i) {
    player.i = i || 0;
    var track = player.tracks[player.i];
    player.playing = track;
    var src = track.src;
    player.currentTrack = player.playing;
    if (src != audio.src) audio.src = src;
    audio.play();
  };

  player.pause = function() {
    audio.pause();
    player.playing = false;
  };

  player.playPause = function(i) {
    var track = player.tracks[i];
    if (player.playing != track) {
      player.play(i);
    } else {
      player.pause();
    }
  };

  player.next = function() {
    if (player.i < player.tracks.length - 1) {
      player.i++;
      player.play(player.i);
    }
  };

  player.previous = function() {
    if (player.i > 0) {
      player.i--;
      player.play(player.i);
    }
  };

  player.load = function(track, index) {
    player.tracks[index] = track;
    if (!player.playing && !player.i && index == 0) {
      //player.currentTrack = player.tracks[0];
    }
  };

  player.seek = function(e) {
    if (!audio.readyState) return false;
    var percent = e.offsetX / e.target.offsetWidth || (e.layerX - e.target.offsetLeft) / e.target.offsetWidth;
    var time = percent * audio.duration || 0;
    audio.currentTime = time;
  };

  audio.addEventListener('timeupdate', function() {
    player.currentTime = audio.currentTime;
    player.duration = audio.duration;
  });

  audio.addEventListener('ended', function(){
    player.next();
  });

  return player;

};



},{"./audio":4}]},{},[3])