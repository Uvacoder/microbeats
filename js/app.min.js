(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

'use strict';

module.exports = function($scope) {

  console.log('MainCtrl');

  $scope.tracks = [];
  
};

},{}],2:[function(require,module,exports){

'use strict';


//var app = require('../app');

module.exports = ['$http', 'player', function($http, player) {
  console.log(player);
  return {
    scope: true,
    link: function(scope, el, attr) {
      var $ = angular.element;
      var tracks = $(el).children();
      scope.tracks = scope.tracks || [];
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        scope.tracks.push({
          index: track.dataset.index,
          title: track.dataset.title,
          url: track.dataset.url
        });
      };
    }
  }
}];


},{}],3:[function(require,module,exports){
// App

'use strict';

var app = angular.module('app', [], ["$interpolateProvider", function($interpolateProvider) {
  $interpolateProvider.startSymbol('{%');
  $interpolateProvider.endSymbol('%}');
}]);

// Services
app.factory('player', require('./services/player'));

// Directives
app.directive('tracklist', require('./directives/tracklist'));

// Filters

// Controllers
app.controller('MainCtrl', require('./controllers/main'));

module.exports = app;

},{"./controllers/main":1,"./directives/tracklist":2,"./services/player":5}],4:[function(require,module,exports){
(function (global){
// Audio element

'use strict';

var audio = global.audio || document.createElement('audio');

module.exports = audio;


}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],5:[function(require,module,exports){
// Audio player

'use strict';


var audio = require('./audio');

//var Player = function() {
module.exports = function() {

  var player = {};
  // Expose audio element
  //player.audio = audio;
  player.i = 0;
  player.playlistIndex = 0;
  player.playing = false;
  player.tracks = [];
  player.currentTrack = null;
  player.currentTime = 0;
  player.duration = 0;

  player.play = function(i, playlistIndex) {
    this.i = i || 0;
    var track = this.tracks[this.i];
    if (track.tracks) {
      this.playlistIndex = playlistIndex;
      this.playing = track.tracks[playlistIndex];
      var src = track.tracks[playlistIndex].stream_url + '?client_id=' + client_id;
    } else {
      this.playing = track;
      var src = track.stream_url + '?client_id=' + client_id;
    }
    this.currentTrack = this.playing;
    if (src != audio.src) audio.src = src;
    audio.play();
  };

  player.pause = function() {
    audio.pause();
    this.playing = false;
  };

  player.playPause = function(i, playlistIndex) {
    var track = this.tracks[i];
    if (track.tracks && this.playing != track.tracks[playlistIndex]) {
      if (!playlistIndex) playlistIndex = 0;
      this.play(i, playlistIndex);
    } else if (!track.tracks && this.playing != track) {
      this.play(i);
    } else {
      this.pause();
    }
  };

  player.next = function() {
    var playlist = this.tracks[this.i].tracks || null;
    if (playlist && this.playlistIndex < playlist.length - 1) {
      this.playlistIndex++;
      this.play(this.i, this.playlistIndex);
    } else if (this.i < this.tracks.length - 1) {
      this.i++;
      // Handle advancing to new playlist
      var playlist = this.tracks[this.i].tracks || null;
      if (this.tracks[this.i].tracks) {
        this.playlistIndex = 0;
        this.play(this.i, this.playlistIndex);
      } else {
        this.play(this.i);
      }
    }
  };

  player.previous = function() {
    var playlist = this.tracks[this.i].tracks || null;
    if (playlist && this.playlistIndex > 0) {
      this.playlistIndex--;
      this.play(this.i, this.playlistIndex);
    } else if (this.i > 0) {
      this.i--;
      if (this.tracks[this.i].tracks) {
        this.playlistIndex = this.tracks[this.i].tracks.length - 1;
        this.play(this.i, this.playlistIndex);
      } else {
        this.play(this.i);
      }
    }
  };

  player.load = function(track, index) {
    this.tracks[index] = track;
    if (!this.playing && !this.i && index == 0) {
      this.currentTrack = this.tracks[0];
    }
  };

  player.seek = function(e) {
    if (!audio.readyState) return false;
    var percent = e.offsetX / e.target.offsetWidth || (e.layerX - e.target.offsetLeft) / e.target.offsetWidth;
    var time = percent * audio.duration || 0;
    audio.currentTime = time;
  };

  audio.addEventListener('timeupdate', function() {
    player.currentTime = audio.currentTime;
    player.duration = audio.duration;
  });

  audio.addEventListener('ended', function(){
    player.next();
  });

  return player;

};

//var player = player || new Player();

//module.exports = player;


},{"./audio":4}]},{},[3])